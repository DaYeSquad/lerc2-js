{"version":3,"sources":["lercdecoder2.ts"],"names":[],"mappings":"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","file":"lercdecoder2.js","sourcesContent":["// lercdecoder2.js\n//\n// Copyright (c) 2016 Frank Lin (lin.xiaoe.f@gmail.com)\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\n/// <reference path=\"../../typings/globals/mathjs/index.d.ts\" />\n\nimport {BitStuff2, BitStuff2DecodeResult} from './bitstuff2';\nimport * as math from 'mathjs';\nimport BigNumber = mathjs.BigNumber;\n\nenum Lerc2DataType {\n  CHAR = 0,\n  BYTE,\n  SHORT,\n  USHORT,\n  INT,\n  UINT,\n  FLOAT,\n  DOUBLE,\n  UNDEFINED\n}\n\nexport interface Lerc2HeaderInfo {\n  fileIdentifierString: string;\n  version: number;\n  checksum: number;\n  height: number;\n  width: number;\n  numValidPixel: number;\n  microBlockSize: number;\n  blobSize: number;\n  lercDataType: Lerc2DataType;\n  maxZError: number;\n  zMin: number;\n  zMax: number;\n}\n\nexport interface Lerc2ParseResult {\n  width: number;\n  height: number;\n  zMin: number;\n  zMax: number;\n  dataType: Lerc2DataType;\n  pixelData: ArrayBuffer;\n}\n\nexport class Lerc2Decoder {\n  private static FILE_KEY_ = \"Lerc2 \";\n  private buffer_: ArrayBuffer = undefined;\n  private bufferDataView_: DataView = undefined;\n  private fp_: number = 0;\n  private headerInfo_: Lerc2HeaderInfo = <Lerc2HeaderInfo>{};\n  private bitStuff2Util_: BitStuff2 = undefined;\n  private pixelValuesDataView_: DataView = undefined;\n\n  constructor(buffer: ArrayBuffer) {\n    this.buffer_ = buffer;\n    this.bitStuff2Util_ = new BitStuff2(new Uint8Array(buffer));\n    this.bufferDataView_ = new DataView(this.buffer_);\n  }\n\n  parse(skipChecksum: boolean=true): Lerc2ParseResult {\n    // parse header and set lerc2 version to bitStuff2\n    this.readHeader_();\n    this.bitStuff2Util_.setLerc2Version(this.headerInfo_.version);\n\n    // You can safely skip this step.\n    if (!skipChecksum) {\n      if (!this.isChecksumMatch_())\n        throw \"Checksum is not matched\";\n    }\n\n    this.pixelValuesDataView_ = new DataView(new Uint8Array(this.headerInfo_.height * this.headerInfo_.width * this.sizeofHeaderInfoDataType_()).buffer);\n    for (let i = 0; i < this.headerInfo_.width * this.headerInfo_.height; i++) {\n      this.setPixelValuesByHeaderInfoDataType_(i, 0);\n    }\n\n    if (this.headerInfo_.numValidPixel === 0)\n      return;\n\n    //TODO(lin.xiaoe.f@gmail.com): Read mask, assumes bit mask is all valid now.\n    this.readMask_();\n\n    if (this.headerInfo_.zMin === this.headerInfo_.zMax) { // image is const\n      let z0: number = this.headerInfo_.zMin;\n      for (let i = 0; i < this.headerInfo_.height; i++) {\n        let k = i * this.headerInfo_.width;\n        for (let j = 0; j < this.headerInfo_.width; j++) {\n          //TODO(lin.xiaoe.f@gmail.com): if (m_bitMask.IsValid(k))\n          this.setPixelValuesByHeaderInfoDataType_(k, z0);\n        }\n      }\n      return { width: this.headerInfo_.width, height: this.headerInfo_.height,\n        zMin: this.headerInfo_.zMin, zMax: this.headerInfo_.zMax,\n        dataType: this.headerInfo_.lercDataType, pixelData: this.pixelValuesDataView_.buffer };\n    }\n\n    var readDataOneSweepFlag = this.bufferDataView_.getUint8(this.fp_); // read flag\n    this.fp_++;\n\n    if (readDataOneSweepFlag === 0) { // no binary data in one sweep\n      this.readTiles_();\n    } else {\n      this.readDataOneSweep_();\n    }\n\n    return { width: this.headerInfo_.width, height: this.headerInfo_.height,\n      zMin: this.headerInfo_.zMin, zMax: this.headerInfo_.zMax,\n      dataType: this.headerInfo_.lercDataType, pixelData: this.pixelValuesDataView_.buffer };\n  }\n\n  /**\n   * Get LERC header info, including version, checksum, width, height, numValidPixel, microBlockSize, blobSize,\n   * lercDataType, maxZError, zMin, zMax and move the file position to the mask block.\n   *\n   * @returns {{headerInfo}} LERC header information.\n   */\n  readHeader_(): void {\n    // file header first 6 chars should be \"Lerc2\", byte offset is 0.\n    var bytes = new Uint8Array(this.buffer_, 0, 6);\n    this.headerInfo_.fileIdentifierString = String.fromCharCode.apply(null, bytes);\n    if (this.headerInfo_.fileIdentifierString != Lerc2Decoder.FILE_KEY_) {\n      throw \"Unexpected file identifier string: \" + this.headerInfo_.fileIdentifierString;\n    }\n\n    // lerc stores in little endian\n    this.headerInfo_.version = this.bufferDataView_.getInt32(6, true);         // Int 4\n    this.headerInfo_.checksum = this.bufferDataView_.getUint32(10, true);      // UInt 4\n    this.headerInfo_.height = this.bufferDataView_.getInt32(14, true);         // Int 4\n    this.headerInfo_.width = this.bufferDataView_.getInt32(18, true);          // Int 4\n    this.headerInfo_.numValidPixel = this.bufferDataView_.getInt32(22, true);  // Int 4\n    this.headerInfo_.microBlockSize = this.bufferDataView_.getInt32(26, true); // Int 4\n    this.headerInfo_.blobSize = this.bufferDataView_.getInt32(30, true);       // Int 4\n    this.headerInfo_.lercDataType = this.bufferDataView_.getInt32(34, true);   // Int 4\n    this.headerInfo_.maxZError = this.bufferDataView_.getFloat64(38, true);    // Double 8\n    this.headerInfo_.zMin = this.bufferDataView_.getFloat64(46, true);         // Double 8\n    this.headerInfo_.zMax = this.bufferDataView_.getFloat64(54, true);         // Double 8\n\n    this.fp_ += 62;\n  }\n\n  /**\n   * Check checksum is match or not, returns true if match.\n   * @returns {boolean} true if checksum is the same.\n   */\n  isChecksumMatch_(): boolean {\n    if (this.headerInfo_.version >= 3) {\n      var nChecksumFieldBytes = Lerc2Decoder.FILE_KEY_.length + 8; // start right after the checksum entry\n      var checksum = this.computeChecksumFletcher32_(this.headerInfo_.blobSize - nChecksumFieldBytes);\n\n      if (checksum != this.headerInfo_.checksum) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Fletcher's checksum with bytes. (https://en.wikipedia.org/wiki/Fletcher's_checksum)\n   *\n   * Warning, this implementation is super slow, you may want to improve this version by give eyes on\n   * {@link computeChecksumFletcher32Wrong_} though this method now results out of INT_MAX error in process.\n   *\n   * @param len Buffer length.\n   * @returns {number} Result.\n   */\n  computeChecksumFletcher32_(len: number): BigNumber {\n    let lercBlobLen: number = len;\n\n    let sum1: BigNumber = math.bignumber(0xffff);\n    let sum2: BigNumber = math.bignumber(0xffff);\n    let words: number = parseInt(<any>(lercBlobLen / 2)); // fake the typescript compiler\n\n    let iByte: number = Lerc2Decoder.FILE_KEY_.length + 8; // start right after the checksum entry\n\n    while (words) {\n      let tlen: number = (words >= 359) ? 359 : words;\n      words -= tlen;\n      do {\n        sum1 = math.sum(sum1, this.bufferDataView_.getUint8(iByte++) << 8);\n        sum1 = math.sum(sum1, this.bufferDataView_.getUint8(iByte++));\n        sum2 = math.sum(sum1, sum2);\n      } while (--tlen);\n\n      sum1 = math.sum(math.bitAnd(sum1, 0xffff), math.rightArithShift(sum1, 16));\n      sum2 = math.sum(math.bitAnd(sum2, 0xffff), math.rightArithShift(sum2, 16));\n    }\n\n    // add the straggler byte if it exists\n    if (lercBlobLen & 1) {\n      sum1 = math.sum(sum1, math.leftShift(this.bufferDataView_.getUint8(iByte), 8));\n      sum2 = math.sum(sum1, sum2);\n    }\n\n    // second reduction step to reduce sums to 16 bits\n    sum1 = math.sum(math.bitAnd(sum1, 0xffff), math.rightArithShift(sum1, 16));\n    sum2 = math.sum(math.bitAnd(sum2, 0xffff), math.rightArithShift(sum2, 16));\n\n    // sum2 << 16 | sum1 is greater than INT_MAX use math.js instead.\n    var result = math.leftShift(sum2, 16);\n    result = math.bitXor(result, sum1); // result = math.bitOr(result, sum1);\n\n    return result;\n  }\n\n  /**\n   * Fletcher's checksum with bytes. (https://en.wikipedia.org/wiki/Fletcher's_checksum)\n   *\n   * Warning, this implementation cannot work but much much much faster than the right one.\n   *\n   * @param len Buffer length.\n   * @returns {number} Result.\n   */\n  computeChecksumFletcher32Wrong_(len: number): BigNumber {\n    var lercBlobLen = len;\n\n    var sum1 = 0xffff;\n    var sum2 = 0xffff;\n    var words = parseInt(String(lercBlobLen / 2));\n\n    var iByte = 14;\n\n    while(words) {\n      var tlen = (words >= 359) ? 359 : words;\n      words -= tlen;\n      do {\n\n        sum1 += (this.bufferDataView_.getUint8(iByte++) << 8);\n        sum2 += sum1 += this.bufferDataView_.getUint8(iByte++);\n      } while (--tlen);\n\n      sum1 = (sum1 & 0xffff) + (sum1 >> 16);\n      sum2 = (sum2 & 0xffff) + (sum2 >> 16);\n    }\n\n    // add the straggler byte if it exists\n    if (lercBlobLen & 1) {\n      sum2 += sum1 += (this.bufferDataView_.getUint8(iByte) << 8);\n    }\n\n    // second reduction step to reduce sums to 16 bits\n    sum1 = (sum1 & 0xffff) + (sum1 >> 16);\n    sum2 = (sum2 & 0xffff) + (sum2 >> 16);\n\n    // sum2 << 16 | sum1 is greater than INT_MAX use math.js instead.\n    var result = math.leftShift(math.bignumber(sum2), 16);\n    result = math.bitXor(result, sum1); // result = math.bitOr(result, sum1);\n\n    return result;\n  }\n\n  /**\n   * Read the bit mask of LERC.\n   * @private\n   */\n  readMask_(): void {\n    var numValid = this.headerInfo_.numValidPixel;\n    var width = this.headerInfo_.width;\n    var height = this.headerInfo_.height;\n\n    // get mask blob size in bytes\n    var numBytesMask = this.bufferDataView_.getInt32(this.fp_, true);\n    this.fp_ += 4;\n\n    if ((numValid === 0 || numValid === width * height) && (numBytesMask != 0))\n      throw \"Read mask failed\";\n\n    if (numValid == 0) {\n      //TODO(lin.xiaoe.f@gmail.com): Bit Mask is all invalid.\n    } else if (numValid === width * height) {\n      //TODO(lin.xiaoe.f@gmail.com): Bit Mask is all valid.\n    } else if (numBytesMask > 0) {\n      //TODO(lin.xiaoe.f@gmail.com): RLE decompress.\n      console.log(\"Need RLE decompress\");\n      this.fp_ += numBytesMask;\n    }\n  }\n\n  /**\n   * Read pixel values.\n   * @private\n   */\n  readTiles_(): void {\n    if (this.headerInfo_.version > 1 &&\n      (this.headerInfo_.lercDataType === Lerc2DataType.BYTE || this.headerInfo_.lercDataType === Lerc2DataType.CHAR) &&\n      this.headerInfo_.maxZError === 0.5) {\n      //TODO(lin.xiaoe.f@gmail.com): Try Huffman.\n      //console.log(\"Try Huffman is not implemented yet\");\n    }\n\n    var mbSize = this.headerInfo_.microBlockSize;\n    var height = this.headerInfo_.height;\n    var width = this.headerInfo_.width;\n\n    var numTilesVertical = parseInt(<any>((height + mbSize - 1) / mbSize));\n    var numTilesHorizontal = parseInt(<any>((width + mbSize - 1) / mbSize));\n\n    for (var iTile = 0; iTile < numTilesVertical; iTile++) {\n      var tileH = mbSize;\n      var i0 = iTile * tileH;\n      if (iTile == numTilesVertical - 1) {\n        tileH = height - i0;\n      }\n\n      for (var jTile = 0; jTile < numTilesHorizontal; jTile++) {\n        var tileW = mbSize;\n        var j0 = jTile * tileW;\n        if (jTile == numTilesHorizontal - 1)\n          tileW = width - j0;\n\n        this.readTile_(i0, i0 + tileH, j0, j0 + tileW);\n      }\n    }\n  }\n\n  /**\n   * Read each block tile.\n   * @param i0\n   * @param i1\n   * @param j0\n   * @param j1\n   * @private\n   */\n  readTile_(i0: number, i1: number, j0: number, j1: number): void {\n    let ptr: number = this.fp_;\n    let compareFlag: number = this.bufferDataView_.getUint8(ptr);\n    ptr++;\n    let numPixel: number = 0;\n\n    let bits67: number = compareFlag >> 6;\n    let testCode: number = (compareFlag >> 2) & 15; // use bits 2345 for integrity check\n    if (testCode != ((j0 >> 3) & 15)) {\n      throw \"Read tile integrity check failed\";\n    }\n\n    compareFlag &= 3;\n\n    if (compareFlag === 2) { // entire tile is constant 0 (if valid or invalid doesn't matter)\n      for (let i = i0; i < i1; i++) {\n        let k: number = i * this.headerInfo_.width + j0;\n        for (let j = j0; j < j1; j++, k++)\n          //TODO(lin.xiaoe.f@gmail.com): if (m_bitMask.IsValid(k))\n          this.setPixelValuesByHeaderInfoDataType_(k, 0);\n      }\n      this.fp_ = ptr;\n      return;\n    } else if (compareFlag === 0) { // read z's binary uncompressed\n      let srcPtr: number = ptr;\n      for (let i = i0; i < i1; i++) {\n        let k: number = i * this.headerInfo_.width + j0;\n        for (let j = j0; j < j1; j++, k++) {\n          //TODO(lin.xiaoe.f@gmail.com): if (m_bitMask.IsValid(k))\n          if (this.headerInfo_.lercDataType === Lerc2DataType.FLOAT) {\n            this.setPixelValuesByHeaderInfoDataType_(k, this.bufferDataView_.getFloat32(srcPtr, true));\n            srcPtr += 4;\n          } else if (this.headerInfo_.lercDataType === Lerc2DataType.INT) {\n            this.setPixelValuesByHeaderInfoDataType_(k, this.bufferDataView_.getInt32(srcPtr, true));\n            srcPtr += 4;\n          } else if (this.headerInfo_.lercDataType === Lerc2DataType.USHORT) {\n            this.setPixelValuesByHeaderInfoDataType_(k, this.bufferDataView_.getUint16(srcPtr, true));\n            srcPtr += 2;\n          } else if (this.headerInfo_.lercDataType === Lerc2DataType.SHORT) {\n            this.setPixelValuesByHeaderInfoDataType_(k, this.bufferDataView_.getInt16(srcPtr, true));\n            srcPtr += 2;\n          } else {\n            throw \"Lerc2DataType rather than FLOAT, INT is not supported yet\";\n          }\n          numPixel++;\n        }\n      }\n      ptr += numPixel * this.sizeofHeaderInfoDataType_();\n    } else {\n      // get variable data type and offset.\n      let dataTypeUsed: Lerc2DataType = this.getDataTypeUsed_(bits67);\n      let vdt: {offset: number, ptr: number} = this.readVariableDataType_(ptr, dataTypeUsed);\n      let offset: number = vdt.offset;\n      ptr = vdt.ptr;\n\n      if (compareFlag === 3) {\n        for (let i = i0; i < i1; i++) {\n          let k: number = i * this.headerInfo_.width + j0;\n          for (let j = j0; j < j1; j++, k++) {\n            //TODO(lin.xiaoe.f@gmail.com): if (bitMask.IsValid(k))\n            this.setPixelValuesByHeaderInfoDataType_(k, offset);\n          }\n        }\n      } else {\n        this.bitStuff2Util_.setFilePosition(ptr);\n        let bitDecodeResult: BitStuff2DecodeResult = this.bitStuff2Util_.decode();\n\n        let bufferArray: Uint32Array = bitDecodeResult.data;\n        let bufferArrayDv: DataView = new DataView(bufferArray.buffer);\n        ptr = bitDecodeResult.filePosition;\n\n        let invScale: number = 2 * this.headerInfo_.maxZError;\n        let srcPos: number = 0;\n\n        if (bufferArray.length == (i1 - i0) * (j1 - j0)) { // all valid\n          for (let i = i0; i < i1; i++) {\n            let k: number = i * this.headerInfo_.width + j0;\n            for (let j = j0; j < j1; j++, k++) {\n              let z: number = offset + bufferArrayDv.getUint32(srcPos, true) * invScale;\n              srcPos += 4;\n              this.setPixelValuesByHeaderInfoDataType_(k, <number>(math.min(z, this.headerInfo_.zMax)));\n            }\n          }\n        } else { // not all valid\n          for (let i = i0; i < i1; i++) {\n            let k: number = i * this.headerInfo_.width + j0;\n            for (let j = j0; j < j1; j++, k++) {\n              //TODO(lin.xiaoe.f@gmail.com): if (m_bitMask.IsValid(k))\n              let z: number = offset + bufferArray[srcPos] * invScale;\n              srcPos++;\n              this.setPixelValuesByHeaderInfoDataType_(k, math.min(z, this.headerInfo_.zMax));\n            }\n          }\n        }\n      }\n    }\n    this.fp_ = ptr;\n  }\n\n  /**\n   * Get data type used in offset.\n   * @param tc The bits in 6-7.\n   * @returns {*} Data type used in offset.\n   * @private\n   */\n  getDataTypeUsed_(tc: number): Lerc2DataType {\n    var dt = this.headerInfo_.lercDataType;\n    switch(dt) {\n      case Lerc2DataType.SHORT:\n      case Lerc2DataType.INT: return dt - tc;\n      case Lerc2DataType.USHORT:\n      case Lerc2DataType.UINT: return dt - 2 * tc;\n      case Lerc2DataType.FLOAT: return tc === 0 ? dt : (tc === 1 ? Lerc2DataType.SHORT : Lerc2DataType.BYTE);\n      case Lerc2DataType.DOUBLE: return tc === 0 ? dt : dt - 2 * tc + 1;\n      default:\n        return dt;\n    }\n  }\n\n  /**\n   * Get LERC block header offset variable.\n   * @param ptr The position of buffer.\n   * @param dataTypeUsed The dataTypeUsed.\n   * @returns {*} offset\n   * @private\n   */\n  readVariableDataType_(ptr: number, dataTypeUsed: Lerc2DataType): { offset: number, ptr: number } {\n    switch(dataTypeUsed) {\n      case Lerc2DataType.CHAR: {\n        var c = this.bufferDataView_.getInt8(ptr);\n        ptr += 1;\n        return {offset: c, ptr: ptr};\n      }\n      case Lerc2DataType.BYTE: {\n        var b = this.bufferDataView_.getUint8(ptr);\n        ptr += 1;\n        return {offset: b, ptr: ptr};\n      }\n      case Lerc2DataType.SHORT: {\n        var s = this.bufferDataView_.getInt16(ptr, true);\n        ptr += 2;\n        return {offset: s, ptr: ptr};\n      }\n      case Lerc2DataType.USHORT: {\n        var us = this.bufferDataView_.getUint16(ptr, true);\n        ptr += 2;\n        return {offset: us, ptr: ptr};\n      }\n      case Lerc2DataType.INT: {\n        var i = this.bufferDataView_.getInt32(ptr, true);\n        ptr += 4;\n        return {offset: i, ptr: ptr};\n      }\n      case Lerc2DataType.UINT: {\n        var ui = this.bufferDataView_.getUint32(ptr, true);\n        ptr += 4;\n        return {offset: ui, ptr: ptr};\n      }\n      case Lerc2DataType.FLOAT: {\n        var f = this.bufferDataView_.getFloat32(ptr, true);\n        ptr += 4;\n        return {offset: f, ptr: ptr};\n      }\n      case Lerc2DataType.DOUBLE: {\n        var d = this.bufferDataView_.getFloat64(ptr, true);\n        ptr += 8;\n        return {offset: d, ptr: ptr};\n      }\n      default:\n        return {offset: 0, ptr: ptr};\n    }\n  }\n\n  readDataOneSweep_(): void {\n    for (let i = 0; i < this.headerInfo_.height; i++) {\n      let k: number = i * this.headerInfo_.width;\n      let cntPixel: number = 0;\n      let srcPtr: number = this.fp_;\n      let sizeofType: number = 0;\n      for (let j = 0; j < this.headerInfo_.width; j++, k++) {\n        //TODO: if (m_bitMask.IsValid(k))\n        switch (this.headerInfo_.lercDataType) {\n          case Lerc2DataType.BYTE: {\n            sizeofType = 1;\n            this.setPixelValuesByHeaderInfoDataType_(k, this.bufferDataView_.getUint8(srcPtr));\n            srcPtr += 1;\n            cntPixel++;\n            break;\n          }\n          case Lerc2DataType.INT: {\n            sizeofType = 4;\n            this.setPixelValuesByHeaderInfoDataType_(k, this.bufferDataView_.getInt32(srcPtr, true));\n            srcPtr += 4;\n            cntPixel++;\n            break;\n          }\n          case Lerc2DataType.UINT: {\n            sizeofType = 4;\n            this.setPixelValuesByHeaderInfoDataType_(k, this.bufferDataView_.getUint32(srcPtr, true));\n            srcPtr += 4;\n            cntPixel++;\n            break;\n          }\n          case Lerc2DataType.USHORT: {\n            sizeofType = 2;\n            this.setPixelValuesByHeaderInfoDataType_(k, this.bufferDataView_.getUint16(srcPtr, true));\n            srcPtr += 2;\n            cntPixel++;\n            break;\n          }\n          case Lerc2DataType.SHORT: {\n            sizeofType = 2;\n            this.setPixelValuesByHeaderInfoDataType_(k, this.bufferDataView_.getInt16(srcPtr, true));\n            srcPtr += 2;\n            cntPixel++;\n            break;\n          }\n          case Lerc2DataType.FLOAT: {\n            sizeofType = 4;\n            this.setPixelValuesByHeaderInfoDataType_(k, this.bufferDataView_.getFloat32(srcPtr, true));\n            srcPtr += 4;\n            cntPixel++;\n            break;\n          }\n          default:\n            throw `Unsupported type ${this.headerInfo_.lercDataType} in readDataOneSweep_`;\n        }\n      }\n      this.fp_ = cntPixel * sizeofType;\n    }\n  }\n\n  /**\n   * Set pixel value to {@link pixelValuesDataView_}, equivalent to this.pixelValuesDataView_.setXXX with little endian.\n   * @param position Position of pixelValues buffer.\n   * @param value Value to set.\n   * @param dataType DataType used in destination buffer.\n   * @private\n   */\n  setPixelValues_(position: number, value: number, dataType: Lerc2DataType): void {\n    switch (dataType) {\n      case Lerc2DataType.FLOAT: {\n        this.pixelValuesDataView_.setFloat32(position * 4, value, true);\n        break;\n      }\n      case Lerc2DataType.INT: {\n        this.pixelValuesDataView_.setInt32(position * 4, parseInt(<any>(value)), true);\n        break;\n      }\n      case Lerc2DataType.UINT: {\n        this.pixelValuesDataView_.setUint32(position * 4, parseInt(<any>(value)), true);\n        break;\n      }\n      case Lerc2DataType.USHORT: {\n        this.pixelValuesDataView_.setUint16(position * 2, parseInt(<any>(value)), true);\n        break;\n      }\n      case Lerc2DataType.SHORT: {\n        this.pixelValuesDataView_.setInt16(position * 2, parseInt(<any>(value)), true);\n        break;\n      }\n      case Lerc2DataType.BYTE: {\n        this.pixelValuesDataView_.setUint8(position, value);\n        break;\n      }\n      default:\n        throw `Unsupported data type in setPixelValues_ ${this.headerInfo_.lercDataType}`;\n    }\n  }\n\n  /**\n   * Set pixel value to {@link pixelValuesDataView_}, equivalent to this.pixelValuesDataView_.setXXX with little endian.\n   * The data type used depends on {@link headerInfo_}.\n   * @param position Position of pixelValues buffer.\n   * @param value Value to set.\n   * @private\n   */\n  setPixelValuesByHeaderInfoDataType_(position: number, value: number): void {\n    this.setPixelValues_(position, value, this.headerInfo_.lercDataType);\n  }\n\n  /**\n   * Equivalent to sizeof(T) in C.\n   * @returns {number} size of type used.\n   * @private\n   */\n  sizeofHeaderInfoDataType_(): number {\n    switch (this.headerInfo_.lercDataType) {\n      case Lerc2DataType.FLOAT:\n      case Lerc2DataType.INT:\n      case Lerc2DataType.UINT: return 4;\n      case Lerc2DataType.BYTE:\n      case Lerc2DataType.CHAR: return 1;\n      case Lerc2DataType.SHORT:\n      case Lerc2DataType.USHORT: return 2;\n      case Lerc2DataType.DOUBLE: return 8;\n      default:\n        return 0;\n    }\n  }\n\n  /**\n   * Get human readable name from given type.\n   * @param dataType Lerc2 data type in header.\n   * @returns {string} Name of type.\n   * @private\n   */\n  static nameFromDataType_(dataType: Lerc2DataType): string {\n    switch (dataType) {\n      case Lerc2DataType.FLOAT: return \"FLOAT\";\n      case Lerc2DataType.INT: return \"INT\";\n      case Lerc2DataType.UINT: return \"UINT\";\n      case Lerc2DataType.BYTE: return \"BYTE\";\n      case Lerc2DataType.CHAR: return \"CHAR\";\n      case Lerc2DataType.SHORT: return \"SHORT\";\n      case Lerc2DataType.USHORT: return \"USHORT\";\n      case Lerc2DataType.DOUBLE: return \"DOUBLE\";\n      default:\n        return \"UNDEFINED\";\n    }\n  }\n}\n"],"sourceRoot":"/source/"}
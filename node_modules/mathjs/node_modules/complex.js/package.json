{
  "name": "complex.js",
  "homepage": "https://github.com/infusion/Complex.js",
  "bugs": {
    "url": "https://github.com/infusion/Complex.js/issues"
  },
  "title": "complex.js",
  "version": "2.0.1",
  "description": "A complex number library",
  "keywords": [
    "math",
    "complex",
    "number",
    "calculus",
    "parser"
  ],
  "author": {
    "name": "Robert Eisele",
    "email": "robert@xarg.org",
    "url": "http://www.xarg.org/"
  },
  "main": "complex",
  "readmeFilename": "README.md",
  "license": "MIT OR GPL-2.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/infusion/Complex.js.git"
  },
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "mocha tests/*.js"
  },
  "devDependencies": {
    "mocha": "*"
  },
  "readme": "# Complex.js - ℂ in JavaSript\n\n[![NPM Package](https://img.shields.io/npm/v/complex.js.svg?style=flat)](https://npmjs.org/package/complex.js \"View this project on npm\")\n[![Build Status](https://travis-ci.org/infusion/Complex.js.svg?branch=master)](https://travis-ci.org/infusion/Complex.js)\n[![MIT license](http://img.shields.io/badge/license-MIT-brightgreen.svg)](http://opensource.org/licenses/MIT)\n\nComplex.js is a well tested JavaScript library to work with complex number arithmetic in JavaScript. It implements every elementary complex number manipulation function and the API is intentionally similar to [Fraction.js](https://github.com/infusion/Fraction.js). Furthermore, it's the basis of [Polynomial.js](https://github.com/infusion/Polynomial.js) and [Math.js](https://github.com/josdejong/mathjs).\n\n\nExample\n===\n  \n```js\nvar Complex = require('complex.js');\n\nvar c = new Complex(\"99.3+8i\");\nc.mul({re: 3, im: 9}).div(4.9).sub(3, 2);\n```\n\nParser\n===\n\nAny function (see below) as well as the constructor of the *Complex* class parses its input like this.\n\nYou can pass either Objects, Doubles or Strings.\n\nObjects\n---\n```javascript\nnew Complex({re: real, im: imaginary});\nnew Complex({arg: angle, abs: radius});\nnew Complex({phi: angle, r: radius});\n```\n\nDoubles\n---\n```javascript\nnew Complex(55.4);\n```\n\nStrings\n---\n```javascript\nnew Complex(\"123.45\");\nnew Complex(\"15+3i\");\nnew Complex(\"i\");\n```\n\nTwo arguments\n---\n```javascript\nnew Complex(3, 2); // 3+2i\n```\n\nFunctions\n===\n\nComplex sign()\n---\nReturns the complex sign, defined as the complex number normalized by it's absolute value\n\nComplex add(n)\n---\nAdds another complex number\n\nComplex sub(n)\n---\nSubtracts another complex number\n\nComplex mul(n)\n---\nMultiplies the number with another complex number\n\nComplex div(n)\n---\nDivides the number by another complex number\n\nComplex pow(exp)\n---\nReturns the number raised to the complex exponent\n\nComplex sqrt()\n---\nReturns the complex square root of the number\n\nComplex exp(n)\n---\nReturns `e^n` with complex exponent `n`.\n\nComplex log()\n---\nReturns the natural logarithm (base `E`) of the actual complex number\n\ndouble abs()\n---\nCalculates the magnitude of the complex number\n\ndouble arg()\n---\nCalculates the angle of the complex number\n\nComplex inverse()\n---\nCalculates the multiplicative inverse of the complex number (1 / z)\n\nComplex conjugate()\n---\nCalculates the conjugate of the complex number (multiplies the imaginary part with -1)\n\nComplex neg()\n---\nNegates the number (multiplies both the real and imaginary part with -1) in order to get the additive inverse\n\nComplex floor([places=0])\n---\nFloors the complex number parts towards zero\n\nComplex ceil([places=0])\n---\nCeils the complex number parts off zero\n\nComplex round([places=0])\n---\nRounds the complex number parts\n\nboolean equals(n)\n---\nChecks if both numbers are exactly the same\n\nboolean isNaN()\n---\nChecks if the given number is not a number\n\nComplex clone()\n---\nReturns a new Complex instance with the same real and imaginary properties\n\nArray toVector()\n---\nReturns a Vector of the actual complex number with two components\n\nString toString()\n---\nReturns a string representation of the actual number. As of v1.9.0 the output is a bit more human readable\n\n```javascript\nnew Complex(1, 2).toString(); // 1 + 2i\nnew Complex(0, 1).toString(); // i\nnew Complex(9, 0).toString(); // 9\nnew Complex(1, 1).toString(); // 1 + i\n```\n\ndouble valueOf()\n---\nReturns the real part of the number if imaginary part is zero. Otherwise `null`\n\n\nTrigonometric functions\n===\nThe following trigonometric functions are defined on Complex.js:\n\n| Trig | Arcus | Hyperbolic | Arcus-Hyperbolic |\n|------|-------|------------|------------------|\n| sin()  | asin()  | sinh()       | asinh()            |\n| cos()  | acos()  | cosh()       | acosh()            |\n| tan()  | atan()  | tanh()       | atanh()            |\n| cot()  | acot()  | coth()       | acoth()            |\n| sec()  | asec()  | sech()       | asech()            |\n| csc()  | acsc()  | csch()       | acsch()            |\n\n\n\nConstants\n===\n\nComplex.ZERO\n---\nA complex zero instance\n\nComplex.ONE\n---\nA complex one instance\n\nComplex.I\n---\nAn imaginary number i instance\n\nComplex.PI\n---\nA complex PI instance\n\nComplex.E\n---\nA complex euler number instance\n\nComplex.EPSILON\n---\nA small epsilon value used for `equal()` comparison in order to circumvent double inprecision.\n\n\nInstallation\n===\nInstalling complex.js is as easy as cloning this repo or use one of the following commands:\n\n```\nbower install complex.js\n```\nor\n\n```\nnpm install complex.js\n```\n\nUsing Complex.js with the browser\n===\n    <script src=\"complex.js\"></script>\n    <script>\n        console.log(Complex(\"4+3i\"));\n    </script>\n\n\nUsing Complex.js with require.js\n===\n    <script src=\"require.js\"></script>\n    <script>\n    requirejs(['complex.js'],\n    function(Complex) {\n        console.log(Complex(\"4+3i\"));\n    });\n    </script>\n\n\nCoding Style\n===\nAs every library I publish, complex.js is also built to be as small as possible after compressing it with Google Closure Compiler in advanced mode. Thus the coding style orientates a little on maxing-out the compression rate. Please make sure you keep this style if you plan to extend the library.\n\n\nTesting\n===\nIf you plan to enhance the library, make sure you add test cases and all the previous tests are passing. You can test the library with\n\n```\nnpm test\n```\n\n\nCopyright and licensing\n===\nCopyright (c) 2015, Robert Eisele (robert@xarg.org)\nDual licensed under the MIT or GPL Version 2 licenses.\n",
  "_id": "complex.js@2.0.1",
  "_shasum": "ea90c7a05aeceaf3a376d2c0f6a78421727d6879",
  "_from": "complex.js@2.0.1",
  "_resolved": "https://registry.npmjs.org/complex.js/-/complex.js-2.0.1.tgz"
}

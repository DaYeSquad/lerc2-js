{
  "name": "tiny-emitter",
  "version": "1.0.2",
  "description": "A tiny (less than 1k) event emitter library",
  "main": "index.js",
  "scripts": {
    "test": "testling | tap-format-spec",
    "bundle": "browserify index.js > dist/tinyemitter.js -s TinyEmitter && echo 'Bundled'",
    "minify": "uglifyjs dist/tinyemitter.js -o dist/tinyemitter.min.js -m && echo 'Minified'",
    "build": "npm test && npm run bundle && npm run minify",
    "size": "uglifyjs index.js -o minified.js -m && ls -l && rm minified.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/scottcorgan/tiny-emitter.git"
  },
  "keywords": [
    "event",
    "emitter",
    "pubsub",
    "tiny",
    "events",
    "bind"
  ],
  "author": {
    "name": "Scott Corgan"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/scottcorgan/tiny-emitter/issues"
  },
  "devDependencies": {
    "@tap-format/spec": "0.2.0",
    "browserify": "^11.2.0",
    "tape": "^4.2.1",
    "testling": "^1.7.1",
    "uglify-js": "^2.5.0"
  },
  "testling": {
    "files": [
      "test/index.js"
    ],
    "browsers": [
      "iexplore/10.0",
      "iexplore/9.0",
      "firefox/16..latest",
      "chrome/22..latest",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "readme": "# tiny-emitter\n \nA tiny (less than 1k) event emitter library. Works in the browser, in Node, and with [Browserify](http://browserify.org).\n\n[![browser support](https://ci.testling.com/scottcorgan/tiny-emitter.png)](https://ci.testling.com/scottcorgan/tiny-emitter)\n \n## Install\n\nNode and Browserify\n\n```\nnpm install tiny-emitter --save\n```\n \nBrowser\n\n```\nbower install tiny-emitter --save\n```\n \n```html\n<script src=\"bower_components/tiny-emitter/dist/tinyemitter.min.js\"></script>\n``` \n\n## Usage\n\nNode and Browserify\n\n```js\nvar Emitter = require('tiny-emitter');\nvar emitter = new Emitter();\n\nemitter.on('some-event', function (arg1, arg2, arg3) {\n //  \n});\n\nemitter.emit('some-event', 'arg1 value', 'arg2 value', 'arg3 value');\n```\n\nBrowser\n\n```js\nvar emitter = new TinyEmitter();\n\nemitter.on('some-event', someCallback);\nemitter.emit('some-event');\n```\n\n## Instance Methods\n\n### on(event, callback[, context])\n\nSubscribe to an event\n\n* `event` - the name of the event to subscribe to\n* `callback` - the function to call when event is emitted\n* `context` - (OPTIONAL) - the context to bind the event callback to\n\n### once(event, callback[, context])\n\nSubscribe to an event only **once**\n\n* `event` - the name of the event to subscribe to\n* `callback` - the function to call when event is emitted\n* `context` - (OPTIONAL) - the context to bind the event callback to\n\n### off(event[, callback])\n\nUnsubscribe from an event or all events. If no callback is provided, it unsubscribes you from all events.\n\n* `event` - the name of the event to unsubscribe from\n* `callback` - the function used when binding to the event\n\n### emit(event[, arguments...])\n\nTrigger a named event\n\n* `event` - the event name to emit\n* `arguments...` - any number of arguments to pass to the event subscribers\n\n## Test and Build\n \nBuild (Tests, Browserifies, and minifies)\n\n```\nnpm install\nnpm run build\n```\n\nTest\n\n```\nnpm install\nnpm test\n```",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/scottcorgan/tiny-emitter",
  "_id": "tiny-emitter@1.0.2",
  "_shasum": "8e49470d3f55f89e247210368a6bb9fb51aa1601",
  "_from": "tiny-emitter@1.0.2",
  "_resolved": "https://registry.npmjs.org/tiny-emitter/-/tiny-emitter-1.0.2.tgz"
}
